using RRCG;
using RRCGSource;
using System.Collections.Generic;

public class Tree : CircuitDescriptor
{
    Variable<int> integer = new Variable<int>();

    public override void CircuitGraph()
    {
        integer.Value = 0;
        ChipLib.Log(ListCreate2());
    }
    public dynamic ListCreate2()
    {
        return ListCreate<int>(
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            //ListCreate1(),
            ListCreate1()
        );
    }
    public dynamic ListCreate1()
    {
        return ListCreate<int>(
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0(),
            ListCreate0()
        );
    }
    public dynamic ListCreate0()
    {
        return ListCreate<int>(
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value,
            integer.Value
        );
    }
}
